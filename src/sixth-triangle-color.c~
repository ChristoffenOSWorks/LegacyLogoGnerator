/*
 * This is a Christoffen C specification file.
 *
 * All code here is written by me, MGage Morgan, on the weekend of 1/2/2015.
 *
 * The Christoffen C is written in and compiled by the C programming language.
 * It is generated by the libcairo2 2D graphics library.
 *
 * Got it working on Ubuntu 15.04 "Vivid Vervet."
 *
 * In order to do so, you need to use flags not defined on cairographics.org:
 *
 * You also need to include the direct path to the cairo.h file, for example:
 * #include "/usr/include/cairo/cairo.h"
 *
 * This software was compiled by Gage Morgan on October 3, 2015.
 * Thanks for support @ Christoffen Corporation.
*/ 

#include "/usr/include/cairo/cairo.h"

int
main (int argc, char *argv[])
{
        cairo_surface_t *surface = //Sets the Cairo surface context
            cairo_image_surface_create (CAIRO_FORMAT_ARGB32, 421, 410); //Creates Cairo image surface, sets image resolution.
        cairo_t *cr = //Declare *cr as a Cairo context.
            cairo_create (surface); //Sets the Cairo context as a pointer, *cr.

	/* Sixth triangle */
	cairo_set_source_rgb (cr, 0.28, 0.42, 0.61); //Sets the color of the triangle.
        cairo_scale (cr, 1.0, 1.0); //I honestly don't know why this is here, but am not ready to mess things up until the next revision.
	cairo_line_to (cr, 195, 260); //Draws a line from Point A to Point B.
	cairo_line_to (cr, 333, 356); //Draws a line from Point B to Point C.
	cairo_line_to (cr, 128, 330); //Draws a line from Point C back to Point A.
	cairo_close_path (cr); //Finishes the connections between Points A and C, closes off the figure.

	cairo_fill_preserve (cr); //Preserve fill so shape doesn't output as an outline.
	cairo_set_source_rgb (cr, 0.28, 0.42, 0.61); //Sets the color of the triangle (again)
	cairo_stroke (cr); //Draw the final shape

	/* Write output and clean up */
        cairo_surface_write_to_png (surface, "../images/triangle6-color.png"); //Name the resulting image as triangle6-color.png
        cairo_destroy (cr); //Destroy the context pointer, frees up memory and/or lag
        cairo_surface_destroy (surface); //Destroy the surface pointer, frees up memory and/or lag

        return 0; //No numbers needed!!
}



